#######################################
# UML2::Activity
#
#(c) Mark Strembeck
#######################################

package provide UML2::Activity 0.1.1

package require UML2::Graph 0.1.1

namespace eval ::UML2 {

################################
# Class Activity
################################

Class create Activity -superclass {::xotcl::Class ::UML2::Graph}

Activity instproc init args {
  foreach ntype {Action InitialNode ActivityFinalNode ForkNode\
		 JoinNode MergeNode DecisionNode} {
    my valid_node_types add ::UML2::$ntype
  }
  foreach etype {ControlFlow ObjectFlow} {
    my valid_edge_types add ::UML2::$etype
  }
  my superclass add ::UML2::Graph

  [self] instproc addEdge {edgeType fromType from toType to {name ""}} {
    set result [next]
    if {[$result success]} {
      # all activity edges are directed
      [$result object_reference] source_navigable 0
    }
    return $result
  }

  [self] instproc init args {
    next
    my valid_node_types [[my info class] valid_node_types]
    my valid_edge_types [[my info class] valid_edge_types]
    foreach node [lsort -dictionary [[my info class]::nodes info children]] {
      if {[$node isclass]} {
	my valid_node_types add $node
	my addNode $node [$node name]
      } else {
	my addNode [$node info class] [$node name]
      }
    }
    foreach edge [lsort -dictionary [[my info class]::edges info children]] {
      set sourcenode [[my info class] getFQON [$edge source_type] [$edge source]]
      if {[$sourcenode isclass]} { set edgesourcetype $sourcenode } else { set edgesourcetype [$edge source_type] }
      set targetnode [[my info class] getFQON [$edge target_type] [$edge target]]
      if {[$targetnode isclass]} { set edgetargettype $targetnode } else { set edgetargettype [$edge target_type] }
      my addEdge [$edge info class] $edgesourcetype [$edge source] $edgetargettype [$edge target] [$edge name]
    }
    my mixin add ::UML2::Activity::ProcessInstance
  }

  next
}

Activity instproc addEdge {edgeType fromType from toType to {name ""}} {
  set result [next]
  if {[$result success]} {
    # all activity edges are directed
    [$result object_reference] source_navigable 0
  }
  return $result
}

# check the construction rules of UML activity models (overwrites Graph instproc checkGraphConstructionRules)
Activity instproc checkGraphConstructionRules {edgeType fromType from toType to} {
  if {[$fromType info heritage ::UML2::ControlNode] eq "::UML2::ControlNode" ||
      [$toType info heritage ::UML2::ControlNode] eq "::UML2::ControlNode"} {
    set fromnode [my getFQON $fromType $from]
    set tonode [my getFQON $toType $to]
    # UML Superstructure Spec.: The edges coming into and out of a fork node
    # must be either all object flows or all control flows.
    #
    # UML Superstructure Spec.:  The edges coming into and out of a decision node other
    # than the decision input flow (if any), must be either all object flows or all control flows.
    #
    # The decisionInput of a decision node is of type Behavior, it can provide input to guard
    # specifications on edges outgoing from the decision node; i.e. the decisionInput is neither
    # a ControlFlow nor an ObjectFlow.
    if {($fromType eq "::UML2::ForkNode") || ($fromType eq "::UML2::DecisionNode")} {
      if {$edgeType eq "::UML2::ControlFlow"} {
	if {[$fromnode hasIncomingEdgeType "::UML2::ObjectFlow"]} {
	   return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, $fromType << $from >>\
                               has an incoming object flow. Therefore, all outgoing edges must also be object flows."]
	}
      }
      if {$edgeType eq "::UML2::ObjectFlow"} {
	if {[$fromnode hasIncomingEdgeType "::UML2::ControlFlow"]} {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, $fromType << $from >>\
                               has an incoming control flow. Therefore, all outgoing edges must also be control flows."]
	}
      }
      if {$edgeType eq "::UML2::ControlFlow"} {
	if {[$fromnode hasOutgoingEdgeType "::UML2::ObjectFlow"]} {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, $fromType << $from >>\
                               already has an outgoing object flow. Therefore, all other outgoing edges must\
                               also be object flows."]
	}
      }
      if {$edgeType eq "::UML2::ObjectFlow"} {
	if {[$fromnode hasOutgoingEdgeType "::UML2::ControlFlow"]} {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, $fromType << $from >>\
                               already has an outgoing control flow. Therefore, all other outgoing edges must\
                               also be control flows."]
	}
      }
    }
    if {($toType eq "::UML2::ForkNode") || ($toType eq "::UML2::DecisionNode")} {
      if {[$tonode incoming] ne ""} {
	return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		    -comment "[my info class] [self] [self proc] FAILED, $toType << $to >>\
                               already has an incoming edge."]
      }
      if {$edgeType eq "::UML2::ControlFlow"} {
	if {[$tonode hasOutgoingEdgeType "::UML2::ObjectFlow"]} {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, $toType << $to >>\
                               has outgoing object flows. Therefore, the incoming edge must also be an object flow."]
	}
      }
      if {$edgeType eq "::UML2::ObjectFlow"} {
	if {[$tonode hasOutgoingEdgeType "::UML2::ControlFlow"]} {
	   return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, $toType << $to >>\
                               has outgoing control flows. Therefore, the incoming edge must also be a control flow."]
	}
      }
    }
    # UML Superstructure Spec.: If a join node has an incoming object flow, it must
    # have an outgoing object flow, otherwise, it must have an outgoing control flow
    #
    # (i.e. the same join node may have incoming control flows AND incoming object flows)
    if {$fromType eq "::UML2::JoinNode"} {
      if {[$fromnode outgoing] ne ""} {
 	return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
 		    -comment "[my info class] [self] [self proc] FAILED, $fromType << $from >>\
                               already has an outgoing edge."]
      }
      if {$edgeType eq "::UML2::ControlFlow"} {
	if {[$fromnode hasIncomingEdgeType "::UML2::ObjectFlow"]} {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, $fromType << $from >>\
                               has at least one incoming object flow. Therefore, the outgoing edge\
                               must also be an object flow."]
	}
      }
      if {$edgeType eq "::UML2::ObjectFlow"} {
	if {![$fromnode hasIncomingEdgeType "::UML2::ObjectFlow"]} {
	   return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, $fromType << $from >>\
                               has no incoming object flow. Therefore, the outgoing edge must be a control flow."]
	}
      }
    }
    if {$toType eq "::UML2::JoinNode"} {
      if {$edgeType eq "::UML2::ObjectFlow"} {
	if {[$tonode hasOutgoingEdgeType "::UML2::ControlFlow"]} {
	   return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, $toType << $to >>\
                               has an outgoing control flow. Therefore, all incoming edges must also be control flows."]
	}
      }
    }
    # UML Superstructure Spec.: The edges coming into and out of a merge node
    # must be either all object flows or all control flows.
    if {$fromType eq "::UML2::MergeNode"} {
      if {[$fromnode outgoing] ne ""} {
	return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		    -comment "[my info class] [self] [self proc] FAILED, $fromType << $from >>\
                               already has an outgoing edge."]
      }
      if {$edgeType eq "::UML2::ControlFlow"} {
	if {[$fromnode hasIncomingEdgeType "::UML2::ObjectFlow"]} {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, $fromType << $from >>\
                               has incoming object flows. Therefore, the outgoing edge must also be an object flow."]
	}
      }
      if {$edgeType eq "::UML2::ObjectFlow"} {
	if {[$fromnode hasIncomingEdgeType "::UML2::ControlFlow"]} {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, $fromType << $from >>\
                               has incoming control flows. Therefore, the outgoing edge must also be a control flow."]
	}
      }
    }
    if {$toType eq "::UML2::MergeNode"} {
      if {$edgeType eq "::UML2::ControlFlow"} {
	if {[$tonode hasOutgoingEdgeType "::UML2::ObjectFlow"]} {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, $toType << $to >>\
                               has an outgoing object flow. Therefore, the incoming edges must also be object flows."]
	}
      }
      if {$edgeType eq "::UML2::ObjectFlow"} {
	if {[$tonode hasOutgoingEdgeType "::UML2::ControlFlow"]} {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, $toType << $to >>\
                               has an outgoing control flow. Therefore, the incoming edges must also be control flows."]
	}
      }
      if {$edgeType eq "::UML2::ObjectFlow"} {
	if {[$tonode hasIncomingEdgeType "::UML2::ControlFlow"]} {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, $toType << $to >>\
                               has an incoming control flow. Therefore, all other incoming edges must\
                               also be control flows."]
	}
      }
      if {$edgeType eq "::UML2::ControlFlow"} {
	if {[$tonode hasIncomingEdgeType "::UML2::ObjectFlow"]} {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, $toType << $to >>\
                               has an incoming object flow. Therefore, all other incoming edges must\
                               also be object flows."]
	}
      }
    }
  }
  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 1\
	      -comment "[my info class] [self] [self proc] success, the edge from $fromType $from to\
                       $toType $to fulfills all [my info class] graph construction rules."]
}


################################
# Activity nodes
################################

Class create ActivityNode -superclass ::UML2::Graph::Node

ActivityNode instproc init args {
  if {[[self] isclass]} {
    foreach c [[my info class] info heritage ::UML2::Graph::Node::Multi*] {
      my superclass add $c
    }
    foreach c [[my info class] info heritage ::UML2::Graph::Node::Single*] {
      my superclass add $c
    }
  }
  next
}

ActivityNode instproc hasIncomingEdgeType {edgeType} {
  foreach e [my incoming] {
    if {[$e istype $edgeType]} { return 1 }
  }
  return 0
}

ActivityNode instproc hasOutgoingEdgeType {edgeType} {
  foreach e [my outgoing] {
    if {[$e istype $edgeType]} { return 1 }
  }
  return 0
}

Class create Action -superclass {::UML2::ActivityNode ::UML2::Graph::Node::MultiIn ::UML2::Graph::Node::MultiOut}\
    -slots {
      ::msxolib::OrderedSet input
      ::msxolib::OrderedSet output
    }

Class create ControlNode -superclass ::UML2::ActivityNode

Class create InitialNode -superclass {::UML2::ControlNode ::UML2::Graph::Node::MultiOut}

Class create ActivityFinalNode -superclass {::UML2::ControlNode ::UML2::Graph::Node::MultiIn}

Class create FlowFinalNode -superclass {::UML2::ControlNode ::UML2::Graph::Node::MultiIn}

Class create ForkNode -superclass {::UML2::ControlNode ::UML2::Graph::Node::SingleIn ::UML2::Graph::Node::MultiOut}

Class create JoinNode -superclass {::UML2::ControlNode ::UML2::Graph::Node::MultiIn ::UML2::Graph::Node::SingleOut}

Class create DecisionNode -superclass {::UML2::ControlNode ::UML2::Graph::Node::SingleIn ::UML2::Graph::Node::MultiOut}

Class create MergeNode -superclass {::UML2::ControlNode ::UML2::Graph::Node::MultiIn ::UML2::Graph::Node::SingleOut}

Class create ObjectNode -superclass {::UML2::ActivityNode ::UML2::Graph::Node::MultiIn ::UML2::Graph::Node::MultiOut}\
    -slots {
      ::msxolib::SingleValued upper_bound
      ::msxolib::SingleValued lower_bound -default 0
    }

Class create Pin -superclass ::UML2::ObjectNode

Class create InputPin -superclass ::UML2::Pin

Class create OutputPin -superclass ::UML2::Pin


################################
# Activity edges
################################

Class create ActivityEdge -superclass ::UML2::Graph::Edge

Class create ControlFlow -superclass ::UML2::ActivityEdge

Class create ObjectFlow -superclass ::UML2::ActivityEdge -slots {
  ::msxolib::SingleValued input_pin
  ::msxolib::SingleValued output_pin
}

################################
# Class Activity::Token
################################

Class create Activity::Token

Class create Activity::ControlToken -superclass Activity::Token

Class create Activity::ObjectToken -superclass Activity::Token


#################################
# Class Activity::ProcessInstance
#################################

# a helper class to disable certain methods in Activity instances
Class create Activity::ProcessInstance

Activity::ProcessInstance instproc addNode {type {name ""}} {
  # do nothing -- disable addNode method for Activity instances
}

Activity::ProcessInstance instproc addEdge {edgeType fromType from toType to {name ""}} {
  # do nothing -- disable addEdge method for Activity instances
}

}
# ::UML2 namespace ends here
