#######################################
# UML2::BusinessActivity::BreakGlass
#
#(c) Mark Strembeck
#######################################

package provide UML2::BusinessActivity::BreakGlass 0.1.1

package require UML2::BusinessActivity 0.1.2

namespace eval ::UML2 {

  ##############################################
  # Class BusinessActivity::BreakGlassExtension
  ##############################################

  Class create BusinessActivity::BreakGlassExtension

  BusinessActivity::BreakGlassExtension instproc init args {
    [self] slots {
      ::msxolib::SingleValued broken -default 0 -proc value=set {domain var value} {
	my instvar default
	if {![$domain exists $var]} {
	  next
        } elseif {($value eq 1)} {
           $domain set $var $value
	   my on=valuechangedcmd $domain $var $value
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success  1\
		      -comment "Successfully set break-glass state to << $value >>."]
	} else {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "Allowed break-glass states are: '1' (true) or '0' (false).\n\
                Use of << $value >> is not permitted. Once a process instance is broken\
                (i.e. set to '1' = true) it cannot be unbroken (reset to '0' = false)."]
	}
      } -valuechangedcmd {
	$obj mixin add ::UML2::BusinessActivity::BrokenProcessInstance
	foreach n [[set obj]::nodes info children] {
	  if {[[$n info class] istype ::UML2::BusinessAction]} {
	    $n mixin add ::UML2::BusinessActivity::BrokenProcessInstance::ChangedTaskBehavior
	  }
	}
      }

      ::msxolib::SingleValued review_process_type -proc value=set {domain var value} {
	my instvar default
	if {![$domain exists $var]} {
	  next
        } elseif {![::xotcl::Object isobject $value]} {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "The review process must be a ::UML2::Activity. << $value >> is\
                                not of type ::UML2::Activity"]

	} elseif {[$domain info class] eq $value} {
	   return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "The type of review process must be different from the process type to be reviewed.\
                                Therefore << $value >> cannot be the review process for << $domain >>."]
	} elseif {[$value istype ::UML2::Activity]} {
	  $domain set $var $value
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success  1\
		      -comment "Successfully registered << $value >> as review process."]
	} else {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "The review process must be a ::UML2::Activity. << $value >> is\
                                not of type ::UML2::Activity"]
	}
      }

      ::msxolib::SingleValued review_process_instance -proc value=set {domain var value} {
	my instvar default
	if {![$domain exists $var]} {
	  next
        } elseif {![$value istype [$domain review_process_type]]} {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "The instance of the review process must be of type << [$domain review_process_type] >>.\
                                Therefore << $value >> cannot be the review process instance for << $domain >>."]
	} else {
	  $domain set $var $value
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success  1\
		      -comment "Successfully registered << $value >> as review process instance."]
	}
      }

      ::msxolib::SingleValued review_process_activated -default 0 -proc value=set {domain var value} {
	my instvar default
	if {![$domain exists $var]} {
	  next
        } elseif {$value eq 1} {
	  $domain set $var $value
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success  1\
		      -comment "Review process activated."]
	} else {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "A review process can either be activated or not: '1' (true) or '0' (false).\n\
                               Use of << $value >> is not permitted. Once a review process is activated\
                               it cannot be deactivated."]
	}
      }
    }

    [self] instproc breakglassTaskAllocation {baction {subject ""}} {
      if {![[[my info class] businessActionExists $baction] success]} {
	return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		    -comment "[my info class] [self] [self proc] FAILED, BusinessAction << $baction >>\
                            does not exist in BusinessActivity << [[my info class] name] >>."]
      }
      if {$subject != ""} {
	if {![[[my info class] associated_rbac_model] existSubject $subject]} {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, Subject << $subject >>\
                              does not exist in associated RBAC model << [[my info class] associated_rbac_model] >>."]
	}
      }
      if {[my review_process_type] eq ""} {
	return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		    -comment "[my info class] [self] [self proc] FAILED, no review process assigned."]
      }
      set s [[[my info class] associated_rbac_model] getFQON ::UML2::BusinessActivity::Subject $subject]
      set batype [namespace tail [[my info class] set businessaction($baction)]]
      set bainstance [my set [set batype]($baction)]
      set allocation [$bainstance breakglassAllocation $s]
      if {[$allocation success]} {
	my set broken 1
	# instantiate review process
	if {![my review_process_activated]} {
	  my review_process_instance [[my review_process_type] create [self]_review_process]
	  my review_process_activated 1
	}
      }
      return $allocation
    }

    next
  }

  # register the break-glass extension as per-class mixin for the BusinessActivity class
  ::UML2::BusinessActivity instmixin add ::UML2::BusinessActivity::BreakGlassExtension


  ################################################
  # Class BusinessActivity::BrokenProcessInstance
  ################################################

  Class create BusinessActivity::BrokenProcessInstance

  BusinessActivity::BrokenProcessInstance instproc isRoleBoundTaskBroken {baction} {
    foreach rbt [[$baction info class] getAllRoleBindingConstraints] {
      set rbti [my set [namespace tail $rbt]([$rbt name])]
      if {[$rbti broken]} { return 1 }
    }
    return 0
  }

  BusinessActivity::BrokenProcessInstance instproc isSubjectBoundTaskBroken {baction} {
    foreach sbt [[$baction info class] getAllSubjectBindingConstraints] {
      set sbti [my set [namespace tail $sbt]([$sbt name])]
      if {[$sbti broken]} { return 1 }
    }
    return 0
  }

  # redefine the allocateBusinessAction method for broken process instances
  # (i.e. for broken instances of ::UML2::BusinessActivity)
  BusinessActivity::BrokenProcessInstance instproc allocateBusinessAction {baction {subject ""}} {
    if {![[[my info class] businessActionExists $baction] success]} {
      return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		  -comment "[my info class] [self] [self proc] FAILED, BusinessAction << $baction >>\
                            does not exist in BusinessActivity << [[my info class] name] >>."]
    }
    if {$subject != ""} {
      if {![[[my info class] associated_rbac_model] existSubject $subject]} {
	return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		    -comment "[my info class] [self] [self proc] FAILED, Subject << $subject >>\
                              does not exist in associated RBAC model << [[my info class] associated_rbac_model] >>."]
      }
    }
    set s [[[my info class] associated_rbac_model] getFQON ::UML2::BusinessActivity::Subject $subject]
    set batype [namespace tail [[my info class] set businessaction($baction)]]
    set bainstance [my set [set batype]($baction)]
    set allocation [$bainstance allocate $s]
    if {![$allocation success]} {
      return $allocation
    } else {
      # only allocate role-bound tasks if non of the role-bound tasks is broken
      if {![my isRoleBoundTaskBroken $bainstance]} {
	foreach rbt [[$bainstance info class] getAllRoleBindingConstraints] {
	  set rbti [my set [namespace tail $rbt]([$rbt name])]
	  $rbti executing_role [$bainstance executing_role]
	}
      }
      # only allocate subject-bound tasks if non of the subject-bound tasks is broken
      if {![my isSubjectBoundTaskBroken $bainstance]} {
	foreach sbt [[$bainstance info class] getAllSubjectBindingConstraints] {
	  set sbti [my set [namespace tail $sbt]([$sbt name])]
	  set sballocation [$sbti allocate $s]
	  if {![$sballocation success]} {
	    $allocation comment "[my info class] [self] [self proc] INCOMPLETE, one of the subject bound\
                               BusinessActions could not be allocated to << [$bainstance executing_subject] >>.\
                               This should NEVER HAPPEN. \n *** Original comment: [$allocation comment]"
	    $allocation success 0
	    return $allocation
	  }
	}
      }
    }
    return $allocation
  }

  #####################################################################
  # Class BusinessActivity::BrokenProcessInstance::ChangedTaskBehavior
  ####################################################################

  # this class defines changed behavior for all (broken and unbroken)
  # task instances in a broken process instance
  Class create BusinessActivity::BrokenProcessInstance::ChangedTaskBehavior

  BusinessActivity::BrokenProcessInstance::ChangedTaskBehavior instproc isDMETaskBroken {} {
    set mutex [[my info class] array names dme]
    if {$mutex eq ""} {
      return 0
    } else {
      foreach ba $mutex {
	set batype [namespace tail [[my info class] set dme($ba)]]
	set bainstance [[my owning_graph] set [set batype]($ba)]
	if {[$bainstance broken]} { return 1 }
	}
    }
    return 0
  }

  # redefine the isAllocatabelToSubject method:  the DME, SBind, and RBind checks are disabled
  # for task instances that have a "constraint relation" to a broken task instance but are
  # themselves unbroken. Broken task instances cannot be re-allocated via the "allocate" method
  # (see also Class BusinessAction::BrokenTaskInstance)
  BusinessActivity::BrokenProcessInstance::ChangedTaskBehavior instproc isAllocatableToSubject {subject} {
    if {![$subject istype ::UML2::BusinessActivity::Subject]} { return 0 }
    if {![$subject canCurrentlyExecute [my name]]} { return 0 }
    if {![[my owning_graph] isSubjectBoundTaskBroken [self]]} {
      if {![$subject canExecuteAllSubjectBoundTasks [my info class]]} { return 0 }
      if {![my checkSBindConstraints $subject]} { return 0 }
    }
    if {![my isDMETaskBroken]} {
      if {![my checkDMEConstraints $subject]} { return 0 }
    }
    if {![[my owning_graph] isRoleBoundTaskBroken [self]]} {
      if {![my checkRBindConstraints $subject]} { return 0 }
    }
    return 1
  }

  ############################################
  # Class BusinessAction::BreakGlassExtension
  ############################################

  Class create BusinessAction::BreakGlassExtension

  BusinessAction::BreakGlassExtension instproc init args {
    [self] slots {
      ::msxolib::SingleValued broken -default 0 -proc value=set {domain var value} {
	my instvar default
	if {![$domain exists $var]} {
	  next
        } elseif {$value eq 1} {
	  $domain set $var $value
	  my on=valuechangedcmd $domain $var $value
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success  1\
		      -comment "Task broken."]
	} else {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success  0\
		      -comment "Allowed break-glass states are: '1' (true) or '0' (false).\n\
                                Use of << $value >> is not permitted. Once a task instance is broken\
                                (i.e. set to '1' = true) it cannot be unbroken (reset to '0' = false)."]
	}
      }  -valuechangedcmd {
	$obj mixin add ::UML2::BusinessAction::BrokenTaskInstance
      }
    }

    [self] instproc breakglassAllocationAllowed {subject} {
      if {![$subject istype ::UML2::BusinessActivity::Subject]} { return 0 }
      if {![$subject canDoBreakGlassOverride [my name]]} { return 0 }
      return 1
    }

    [self] instproc getAllocatableBreakGlassSubjects {} {
      set subjects ""
      foreach s [[[[my owning_graph] info class] associated_rbac_model] getAllSubjectInstances] {
	if {[my breakglassAllocationAllowed $s]} {
	  lappend subjects $s
	}
      }
      return [lsort -dictionary -unique $subjects]
    }


    [self] instproc breakglassAllocation {{subject ""}} {
      if {$subject eq ""} {
	set allocatable [my getAllocatableBreakGlassSubjects]
	if {$allocatable ne ""} {
	  #randomly choose a subject
	  set index [expr int(fmod(10000*rand(),[llength $allocatable]))]
	  set s [lindex $allocatable $index]
	  if {([my executing_subject] ne "") || ([my executing_role] ne "")} {set reallocation 1} else {set reallocation 0}
	  # ... and allocate task
	  my executing_subject [$s name]
	  my executing_role [$s active_role]
	  my set broken 1
	  if {$reallocation} {
	    return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 1\
		      -comment "[[my owning_graph] info class] [my owning_graph] [self] [self proc],\
                              successfully re-allocated BusinessAction << [my name] >>\
                              to subject << [my executing_subject] >> and role << [my executing_role] >>."]
	  } else {
	    return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 1\
			-comment "[[my owning_graph] info class] [my owning_graph] [self] [self proc],\
                              successfully allocated BusinessAction << [my name] >>\
                              to subject << [my executing_subject] >> and role << [my executing_role] >>."]
	  }
	} else {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[[my owning_graph] info class] [my owning_graph] [self] [self proc] FAILED,\
                              BusinessAction << [my name] >> cannot be allocated to any subject."]
	}
      } else {
	if {[my breakglassAllocationAllowed $subject]} {
	  if {[my executing_subject] eq [$subject name]} {
	    my set broken 1
	    return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 1\
			-comment "[[my owning_graph] info class] [my owning_graph] [self] [self proc],\
                                BusinessAction << [my name] >> already allocated to << [my executing_subject] >>."]
	  }
	  if {([my executing_subject] ne "") || ([my executing_role] ne "")} {set reallocation 1} else {set reallocation 0}
	  my executing_subject [$subject name]
	  my executing_role [$subject active_role]
	  my set broken 1
	  if {$reallocation} {
	    return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 1\
			-comment "[[my owning_graph] info class] [my owning_graph] [self] [self proc],\
                              successfully re-allocated BusinessAction << [my name] >>\
                              to subject << [my executing_subject] >> and role << [my executing_role] >>."]
	  } else {
	    return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 1\
			-comment "[[my owning_graph] info class] [my owning_graph] [self] [self proc],\
                              successfully allocated BusinessAction << [my name] >>\
                              to subject << [my executing_subject] >> and role << [my executing_role] >>."]
	  }
	} else {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[[my owning_graph] info class] [my owning_graph] [self] [self proc] FAILED,\
                              BusinessAction << [my name] >> cannot be allocated to << [$subject name] >>."]
	}
      }
    }

    next
  }

  # register the break-glass extension as per-class mixin for the BusinessAction class
  ::UML2::BusinessAction instmixin add ::UML2::BusinessAction::BreakGlassExtension


  ############################################
  # Class BusinessAction::BrokenTaskInstance
  ############################################

  Class create BusinessAction::BrokenTaskInstance

  # disable the allocate method for broken task instances
  BusinessAction::BrokenTaskInstance instproc  allocate {{subject ""}} {
    return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		-comment "[[my owning_graph] info class] [my owning_graph] [self] [self proc] FAILED,\
                              BusinessAction << [my name] >> was broken (i.e. it was allocated to subject\
                              << [my executing_subject] >> via a break-glass override), therefore the\
                              [self proc] method is disabled for << [my name] >> ."]
  }


  #######################################################
  # Class BusinessActivity::Subject::BreakGlassExtension
  #######################################################

  Class create BusinessActivity::Subject::BreakGlassExtension

  BusinessActivity::Subject::BreakGlassExtension instproc init args {
    array set breakabletasks ""
    next
  }

  # register the break-glass extension as per-class mixin for the BusinessActivity::Subject class
  ::UML2::BusinessActivity::Subject instmixin add ::UML2::BusinessActivity::Subject::BreakGlassExtension



  ##################################################
  # Extensions for Class BusinessActivity::Subject
  ##################################################

  # with respect to the subject's directly and transitively assigned break-glass tasks
  # and with respect ot the subject's active_role: is the subject (currently) able to
  # perform a break-glass override for the task referred to via the baction parameter?
  BusinessActivity::Subject instproc canDoBreakGlassOverride {baction} {
    if {[my directlyOwnsBreakGlassTask $baction]} { return 1 }
    if {[my active_role] != ""} {
      set role [[my owning_graph] getFQON ::UML2::BusinessActivity::Role [my active_role]]
      if {[$role ownsBreakGlassTask $baction]} { return 1 }
      if {[$role ownsTask $baction]} { return 1 }
    }
    return 0
  }

  BusinessActivity::Subject instproc getDirectBreakGlassTasks {} {
    set directtasks ""
    foreach t [my array names breakabletasks] {
      lappend directtasks [my set breakabletasks($t)]
    }
    return [lsort -dictionary $directtasks]
  }

  BusinessActivity::Subject instproc getTransitiveBreakGlassTasks {} {
    set tasks ""
    foreach r [my getAllAssignedRoles] {
      set tasks [concat $tasks [$r getAllBreakGlassTasks]]
    }
    return  [lsort -dictionary -unique $tasks]
  }

  BusinessActivity::Subject instproc getAllBreakGlassTasks {} {
    set tasks [my getDirectBreakGlassTasks]
    set tasks [concat $tasks [my getTransitiveBreakGlassTasks]]
    return [lsort -dictionary -unique $tasks]
  }

  BusinessActivity::Subject instproc directlyOwnsBreakGlassTask {baction} {
    if {[my exists breakabletasks($baction)]} { return 1 }
    return 0
  }

  ####################################################
  # Class BusinessActivity::Role::BreakGlassExtension
  ####################################################

  Class create BusinessActivity::Role::BreakGlassExtension

  BusinessActivity::Role::BreakGlassExtension instproc init args {
    array set breakabletasks ""
    next
  }

  # register the break-glass extension as per-class mixin for the BusinessActivity::Role class
  ::UML2::BusinessActivity::Role instmixin add ::UML2::BusinessActivity::Role::BreakGlassExtension


  ##################################################
  # Extensions for Class BusinessActivity::Role
  ##################################################

  BusinessActivity::Role instproc directlyOwnsBreakGlassTask {baction} {
    if {[my exists breakabletasks($baction)]} { return 1 }
    return 0
  }

  BusinessActivity::Role instproc transitivelyOwnsBreakGlassTask {baction} {
    foreach r [my array names juniorroles] {
      if {[[my set juniorroles($r)] ownsBreakGlassTask $baction]} { return 1 }
    }
    return 0
  }

  BusinessActivity::Role instproc ownsBreakGlassTask {baction} {
    if {[my directlyOwnsBreakGlassTask $baction]} { return 1 }
    if {[my transitivelyOwnsBreakGlassTask $baction]} { return 1 }
    return 0
  }

  BusinessActivity::Role instproc getDirectBreakGlassTasks {} {
    set directtasks ""
    foreach t [my array names breakabletasks] {
      lappend directtasks [my set breakabletasks($t)]
    }
    return [lsort -dictionary $directtasks]
  }

  BusinessActivity::Role instproc getTransitiveBreakGlassTasks {} {
    set tasks ""
    foreach jr [my array names juniorroles] {
      set tasks [concat $tasks [[my set juniorroles($jr)] getAllBreakGlassTasks]]
    }
    return [lsort -dictionary -unique $tasks]
  }

  BusinessActivity::Role instproc getAllBreakGlassTasks {} {
    set tasks [my getDirectBreakGlassTasks]
    set tasks [concat $tasks [my getTransitiveBreakGlassTasks]]
    return [lsort -dictionary -unique $tasks]
  }

  ####################################################
  # Extensions for Class BusinessActivity::RBACModel
  ####################################################

  BusinessActivity::RBACModel instproc breakglassTaskRoleAssign {process task role} {
    if {![::xotcl::Object isobject $process]} {
      return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		  -comment "[my info class] [self] [self proc] FAILED, BusinessActivity << $process >>\
                          does not exist."]
    }
    if {![$process istype ::UML2::BusinessActivity]} {
      return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		  -comment "[my info class] [self] [self proc] FAILED, << $process >> is not of\
                          type BusinessActivity."]
    }
    if {![$process existNode ::UML2::BusinessAction $task]} {
      return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		  -comment "[my info class] [self] [self proc] FAILED, BusinessActivity << $process >> does\
                          not contain BusinessAction << $task >>."]
    }
    if {![my existNode ::UML2::BusinessActivity::Role $role]} {
      return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		  -comment "[my info class] [self] [self proc] FAILED, Role << $role >> does not exist."]
    }
    set r [my getFQON ::UML2::BusinessActivity::Role $role]
    set t [$process getFQON ::UML2::BusinessActivity::BusinessAction $task]
    foreach ba [$r getAllAssignedTasks] {
      if {$ba eq $t} {
	return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		    -comment "[my info class] [self] [self proc] FAILED, BusinessAction << $task >>\
                            is already (directly or transitively) assigned to role << $role >> via the\
                            task-to-role assignment relation."]
      }
    }
    foreach sr [$r getAllSeniorRoles] {
      foreach ba [$sr getDirectlyAssignedTasks] {
	if {$ba eq $t} {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, BusinessAction << $task >>\
                              is already assigned to role << [$sr name] >>, a senior-role of << $role >>. By defining\
                              a break-glass relation between << $task >> and << $role >> the corresponding\
                              senior-role would (transitively) acquire << $task >> as a regular task (via\
                              the task-to-role assignment relation) and as a break-glass task."]
	}
      }
    }
    foreach s [my getAllSubjectsOwningRole $role] {
      foreach sr [$s getAllAssignedRoles] {
	foreach st [$sr getAllAssignedTasks] {
	  if {$st eq $t} {
	    return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
			-comment "[my info class] [self] [self proc] FAILED, Role << $role >> is assigned\
                                to Subject << [$s name] >>. This subject also (directly or transitively) owns\
                                Role << [$sr name] >> which again owns BusinessAction << [$st name] >>. Thus,\
                                by defining a break-glass relation between << $task >> and << $role >> Subject\
                                << [$s name] >> would acquire << $task >> as a regular task (via the\
                                 subject-to-role resp. task-to-role assignment relations) and as a break-glass task."]
	  }
	}
      }
    }
    $r set breakabletasks($task) $t
    return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 1\
		-comment "[my info class] [self] [self proc], successfully assigned BusinessAction\
                        << $task >> to Role << $role >> as a break-glass task."]
  }



  BusinessActivity::RBACModel instproc breakglassTaskSubjectAssign {process task subject} {
    if {![::xotcl::Object isobject $process]} {
      return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		  -comment "[my info class] [self] [self proc] FAILED, BusinessActivity << $process >>\
                          does not exist."]
    }
    if {![$process istype ::UML2::BusinessActivity]} {
      return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		  -comment "[my info class] [self] [self proc] FAILED, << $process >> is not of\
                          type BusinessActivity."]
    }
    if {![$process existNode ::UML2::BusinessAction $task]} {
      return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		  -comment "[my info class] [self] [self proc] FAILED, BusinessActivity << $process >> does\
                          not contain BusinessAction << $task >>."]
    }
    if {![my existNode ::UML2::BusinessActivity::Subject $subject]} {
      return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		  -comment "[my info class] [self] [self proc] FAILED, Subject << $subject >> does not exist."]
    }
    set s [my getFQON ::UML2::BusinessActivity::Subject $subject]
    set t [$process getFQON ::UML2::BusinessActivity::BusinessAction $task]
    foreach r [$s getAllAssignedRoles] {
      foreach st [$r getAllAssignedTasks] {
	if {$st eq $t} {
	  return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 0\
		      -comment "[my info class] [self] [self proc] FAILED, Subject << $subject >> (directly or\
                                transitively) owns Role << [$r name] >> which again owns BusinessAction\
                                << [$st name] >>. Thus, by defining a break-glass relation between << $task >>\
                                and << $subject >>, this subject would acquire << $task >> as a regular task\
                                (via the subject-to-role resp. task-to-role assignment relations) and as a\
                                break-glass task."]
	}
      }
    }
    $s set breakabletasks($task) $t
    return [::msxolib::FunctionResult create [::xotcl::Object autoname ::UML2::resultobjects::result] -success 1\
		-comment "[my info class] [self] [self proc], successfully assigned BusinessAction\
                        << $task >> to subject << $subject >> as a break-glass task."]
  }


}
# ::UML2 namespace ends here
